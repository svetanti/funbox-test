{"version":3,"sources":["images/cat.png","components/Card.js","components/Cards.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","card","React","useState","isSelected","setSelected","isJustClicked","seJustClicked","isAvailable","cardCornerClassName","cardBackgroundClassName","cardWeightClassName","cardClassName","className","id","onClick","onMouseOver","type","serving","miceNumber","feature","src","cat","alt","weight","description","href","target","Cards","isisAvailable","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uHAAAA,EAAOC,QAAU,IAA0B,iC,2IC0D5BC,MAvDf,SAAcC,GAAO,IAAD,EACkBC,IAAMC,UAAS,GADjC,mBACTC,EADS,KACGC,EADH,OAEuBH,IAAMC,UAAS,GAFtC,mBAETG,EAFS,KAEMC,EAFN,KAGVC,EAAcP,EAAKO,YACnBC,EAAmB,uBAAmBD,EACxC,8BACA,+BACEE,EAAuB,2BAAuBF,EAChD,kCACA,mCACEG,EAAmB,uBAAmBH,EACxC,8BACA,+BACEI,EAAa,eAAWN,GAAiB,eAgB/C,OACI,wBAAIO,UAAWD,EAAeE,GAAIb,EAAKa,GAAIC,QAN/C,WACIV,GAAaD,GACbG,GAAc,IAIkDS,YAAa,kBAAMT,GAAc,KAC7F,yBAAKM,UAAWT,EAAaK,EAAsB,iBACnD,yBAAKI,UAAWT,EAAaM,EAA0B,oBACnD,uBAAGG,UAAU,mBAAb,gJACA,wBAAIA,UAAU,eAAd,8CACA,uBAAGA,UAAU,kBAAkBZ,EAAKgB,MACpC,uBAAGJ,UAAU,iBACT,0BAAMA,UAAU,wBAAwBZ,EAAKiB,QAA7C,KADJ,uCAEI,0BAAML,UAAU,wBAAhB,IAAyCZ,EAAKkB,WAA9C,KAFJ,qDAGelB,EAAKmB,SACpB,yBAAKC,IAAKC,IAAKC,IAAI,uJAA+BV,UAAU,cAC5D,yBAAKA,UAAWT,EAAaO,EAAsB,gBAC/C,uBAAGE,UAAU,qBAAqBZ,EAAKuB,QACvC,uBAAGX,UAAU,wBAAb,kBAIJT,EA/BJI,EACQ,uBAAGK,UAAU,aAAaZ,EAAKwB,aAG/B,uBAAGZ,UAAU,sCAAb,qDAA6DZ,EAAKgB,KAAlE,kEA4BC,uBAAGJ,UAAU,aAAb,uIAAoD,uBAAGa,KAAK,IAAIC,OAAO,SAASd,UAAU,4BAAtC,4BAApD,OCQNe,MAxDf,WAkCI,OACI,wBAAIf,UAAU,SAlCJ,CACV,CACIC,GAAI,EACJG,KAAM,+CACNC,QAAS,KACTC,WAAY,2BACZC,QAAS,GACTI,OAAQ,MACRC,YAAa,4LACbjB,aAAa,GAEjB,CACIM,GAAI,EACJG,KAAM,wCACNC,QAAS,KACTC,WAAY,6BACZC,QAAS,GACTI,OAAQ,IACRC,YAAa,oPACbjB,aAAa,GAEjB,CACIM,GAAI,EACJG,KAAM,wCACNC,QAAS,MACTC,WAAY,mCACZC,QAAS,8FACTI,OAAQ,IACRC,YAAa,8LACbI,eAAe,IAMRC,KAAI,SAAC7B,GAAD,OACP,kBAAC,EAAD,CACI8B,IAAK9B,EAAKa,GACVA,GAAIb,EAAKa,GACTb,KAAMA,EACNgB,KAAMhB,EAAKgB,KACXC,QAASjB,EAAKiB,QACdC,WAAYlB,EAAKkB,WACjBC,QAASnB,EAAKmB,QACdI,OAAQvB,EAAKuB,OACbC,YAAaxB,EAAKwB,YAClBjB,YAAaP,EAAKO,mBCrCvBwB,MATf,WACE,OACE,yBAAKnB,UAAU,QACb,kBAAC,EAAD,QCKcoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2fea57a6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.c4c199b5.png\";","import React from 'react';\r\nimport cat from '../images/cat.png';\r\n\r\nfunction Card(card) {\r\n    const [isSelected, setSelected] = React.useState(false);\r\n    const [isJustClicked, seJustClicked] = React.useState(false);\r\n    const isAvailable = card.isAvailable;\r\n    const cardCornerClassName = `card__corner ${isAvailable ?\r\n        'card__corner_theme_selected' :\r\n        'card__corner_theme_disabled'}`;\r\n    const cardBackgroundClassName = `card__background ${isAvailable ?\r\n        'card__background_theme_selected' :\r\n        'card__background_theme_disabled'}`;\r\n    const cardWeightClassName = `card__weight ${isAvailable ?\r\n        'card__weight_theme_selected' :\r\n        'card__weight_theme_disabled'}`;\r\n    const cardClassName = `card ${isJustClicked && 'card_active'}`;\r\n\r\n    function outOfStock() {\r\n        if (isAvailable) {\r\n            return (<p className=\"card__buy\">{card.description}</p>);\r\n        }\r\n        else {\r\n            return (<p className=\"card__buy card__buy_theme_disabled\">Печалька, {card.type} закончился.</p>);\r\n        }\r\n    }\r\n\r\n    function selectCard() {\r\n        setSelected(!isSelected);\r\n        seJustClicked(true);\r\n    }\r\n\r\n    return (\r\n        <li className={cardClassName} id={card.id} onClick={selectCard} onMouseOver={() => seJustClicked(false)} >\r\n            <div className={isSelected ? cardCornerClassName : 'card__corner'}></div>\r\n            <div className={isSelected ? cardBackgroundClassName : 'card__background'}>\r\n                <p className=\"card__main-text\">Сказочное заморское яство</p>\r\n                <h2 className=\"card__title\">Нямушка</h2>\r\n                <p className=\"card__subtitle\">{card.type}</p>\r\n                <p className=\"card__subtext\">\r\n                    <span className=\"card__subtext_number\">{card.serving} </span>порций\r\n                    <span className=\"card__subtext_number\"> {card.miceNumber} </span>\r\n                    в подарок {card.feature}</p>\r\n                <img src={cat} alt=\"Серый кот, очень симпатичный\" className=\"card__cat\" />\r\n                <div className={isSelected ? cardWeightClassName : 'card__weight'}>\r\n                    <p className=\"card__weight_text\">{card.weight}</p>\r\n                    <p className=\"card__weight_subtext\">кг</p>\r\n                </div >\r\n            </div>\r\n            {\r\n                isSelected ? outOfStock() :\r\n                    (<p className=\"card__buy\">Чего сидишь? Порадуй котэ, <a href=\"#\" target=\"_blank\" className=\"card__buy card__buy_link\">купи</a>.</p>)\r\n            }\r\n\r\n        </li >\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction Cards() {\r\n    const cards = [\r\n        {\r\n            id: 1,\r\n            type: 'с фуа-гра',\r\n            serving: '10',\r\n            miceNumber: 'мышь',\r\n            feature: '',\r\n            weight: '0,5',\r\n            description: 'Печень утки разварная с артишоками.',\r\n            isAvailable: true\r\n        },\r\n        {\r\n            id: 2,\r\n            type: 'с рыбой',\r\n            serving: '40',\r\n            miceNumber: '2 мыши',\r\n            feature: '',\r\n            weight: '2',\r\n            description: 'Головы щучьи с чесноком да свежайшая сёмгушка.',\r\n            isAvailable: true\r\n        },\r\n        {\r\n            id: 3,\r\n            type: 'с рыбой',\r\n            serving: '100',\r\n            miceNumber: '5 мышей',\r\n            feature: 'заказчик доволен',\r\n            weight: '5',\r\n            description: 'Филе из цыплят с трюфелями в бульоне.',\r\n            isisAvailable: false\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <ul className='cards'>\r\n            {cards.map((card) => (\r\n                <Card\r\n                    key={card.id}\r\n                    id={card.id}\r\n                    card={card}\r\n                    type={card.type}\r\n                    serving={card.serving}\r\n                    miceNumber={card.miceNumber}\r\n                    feature={card.feature}\r\n                    weight={card.weight}\r\n                    description={card.description}\r\n                    isAvailable={card.isAvailable}\r\n                />\r\n            ))}\r\n        </ul>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default Cards;","import React from 'react';\nimport '../index.css';\nimport Cards from '../components/Cards';\n\nfunction App() {\n  return (\n    <div className=\"page\">\n      <Cards />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}